<?php
$relPath="./../../pinc/";
include_once($relPath.'site_vars.php');
include_once($relPath.'dp_main.inc');
include_once($relPath.'project_states.inc');
include_once($relPath.'stages.inc');
include_once($relPath.'Project.inc');
include_once($relPath.'wordcheck_engine.inc');
include_once($relPath.'Stopwatch.inc');
include_once('./post_files.inc');
include_once('./word_freq_table.inc');

$watch = new Stopwatch;
$watch->start();

set_time_limit(0); // no time limit

$projectid = $_GET["projectid"];

// $format determins what is presented from this page:
//   'html' - page is rendered with frequencies included
//   'file' - all words and frequencies are presented as a 
//            downloaded file
// 'prompt' - page to prompt for downloading the results
$format = array_get($_GET, "format", "html");

if($format == "file") {
    $t_before = $watch->read();
    list($bad_words_w_freq ,$messages) = _get_word_list($projectid);
    $t_after = $watch->read();
    $t_to_generate_data = $t_after - $t_before;

    $filename="${projectid}_WordCheck_flag_words.txt";
    header("Content-type: text/plain");
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    // The cache-control and pragma is a hack for IE not accepting filenames
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');

    
    echo _("Candidates for project's Good Words List from WordCheck") . "\r\n";
    echo sprintf(_("Project: %s"),get_project_name($projectid)) . "\r\n";
    echo _("Format: [word] - [frequency in text]") . "\r\n";
    echo "\r\n";

    foreach( $bad_words_w_freq as $word => $freq)
        echo "$word - $freq\r\n";

    // we're done here, exit
    exit;
} elseif($format == "prompt") {
    $title = _("Download candidates for project's Good Words List from WordCheck");
    $page_text = _("A list of the words from this project that WordCheck would currently flag for proofers is avaiable for download.");
} elseif($format == "html") {
    $title = _("Candidates for project's Good Words List from WordCheck");
    $page_text = _("Displayed below are the words from this project that WordCheck would currently flag for proofers.");

    $t_before = $watch->read();
    list($bad_words_w_freq ,$messages) = _get_word_list($projectid);
    $t_after = $watch->read();
    $t_to_generate_data = $t_after - $t_before;
} else {
    assert(false);
}

$page_text .= " ";
$page_text .= _("The results list was generated by accessing the most recent text of each page and running it through the WordCheck engine, including the project's current Word Lists. The results list also shows how many times each word occurs in the project text.");

echo_page_header($title,$projectid);

if($format == "html") {
    // how many instances (ie: frequency sections) are there?
    $instances=1;
    // what are the cutoff options?
    $cutoffOptions = array(1,2,3,4,5,10,25,50);
    // what is the intial cutoff frequecny?
    $initialFreq=getInitialCutoff(5,$cutoffOptions,$bad_words_w_freq);

    // echo page support text, like JS and stylesheets
    echo_cutoff_script($cutoffOptions,$instances);
}

echo_word_freq_style();

echo "<p>$page_text</p>";

echo_page_instruction_text( "good" );

echo_download_text( $projectid, $format );

echo_wordcheck_faq_text();

echo_any_warnings_errors( $messages );

echo_page_instruction_reiteration_text( "good" );

if($format == "html") {
    echo_cutoff_text( $initialFreq,$cutoffOptions );

    printTableFrequencies($initialFreq,$cutoffOptions,$bad_words_w_freq,$instances--);
} elseif($format == "prompt") {
    $link_string = sprintf(_("<a href='%s'>Download</a> the word list file for offline analysis."),"?projectid=$projectid&amp;format=file");
    echo "<p>$link_string</p>";

    $link_string = sprintf(_("Alternatively you can view the results <a href='%s'>online</a>."),"?projectid=$projectid");
    echo "<p>$link_string</p>";
}

echo_page_footer($t_to_generate_data);


//---------------------------------------------------------------------------
// supporting page functions

function _get_word_list($projectid) {
    $messages = array();

    // get the latest project text of all pages up to last possible round
    $last_possible_round = get_Round_for_round_number(MAX_NUM_PAGE_EDITING_ROUNDS);
    $pages_res = page_info_query($projectid,$last_possible_round->id,'LE');
    $page_texts = get_page_texts($pages_res);

    // now run it through WordCheck
    list($bad_words_w_freq,$languages,$messages) =
        get_bad_words_for_text($page_texts,$projectid,'all','',array(),'FREQS');

    // multisort screws up all-numeric words so we need to preprocess first
    prep_numeric_keys_for_multisort($bad_words_w_freq);

    // sort the list by frequency, then by word
    array_multisort(array_values($bad_words_w_freq), SORT_DESC, array_map( 'strtolower', array_keys($bad_words_w_freq) ), SORT_ASC, $bad_words_w_freq);

    return array($bad_words_w_freq,$messages);
}

// vim: sw=4 ts=4 expandtab
?>
