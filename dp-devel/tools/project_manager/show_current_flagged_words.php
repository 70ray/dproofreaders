<?php
$relPath="./../../pinc/";
include_once($relPath.'site_vars.php');
include_once($relPath.'dp_main.inc');
include_once($relPath.'project_states.inc');
include_once($relPath.'stages.inc');
include_once($relPath.'Project.inc');
include_once($relPath.'wordcheck_engine.inc');
include_once($relPath.'Stopwatch.inc');
include_once('./post_files.inc');
include_once('./word_freq_table.inc');

$watch = new Stopwatch;
$watch->start();

set_time_limit(0); // no time limit

$projectid = $_GET["projectid"];

// if format is 'text', all words and frequencies will be printed
// if format is not 'text', an HTML page is displayed
$format = @$_GET["format"];

$t_before = $watch->read();

// get the latest project text of all pages up to last possible round
$last_possible_round = get_Round_for_round_number(MAX_NUM_PAGE_EDITING_ROUNDS);
$pages_res = page_info_query($projectid,$last_possible_round->id,'LE');
$page_texts = get_page_texts($pages_res);

// now run it through WordCheck
list($bad_words_w_freq,$languages,$messages) =
    get_bad_words_for_text($page_texts,$projectid,'all','',array(),'FREQS');

// multisort screws up all-numeric words so we need to preprocess first
prep_numeric_keys_for_multisort($bad_words_w_freq);

// sort the list by frequency, then by word
array_multisort(array_values($bad_words_w_freq), SORT_DESC, array_keys($bad_words_w_freq), SORT_ASC, $bad_words_w_freq);

$t_after = $watch->read();
$t_to_generate_data = $t_after - $t_before;

// if the user wants the list in text-only mode
if($format == "text") {
    $filename="${projectid}_WordCheck_flag_words.txt";
    header("Content-type: text/plain");
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    // The cache-control and pragma is a hack for IE not accepting filenames
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');

    // freq side
    foreach( $bad_words_w_freq as $word => $freq) {
        echo "$word - $freq\r\n";
    }
    exit;
}

?>
<html>
<head>
<title>Candidates for project's Good Word List from WordCheck</title>
</head>
<body>
<h1>Candidates for project's Good Word List from WordCheck</h1>
<p>The list below contains words from this project that WordCheck would flag for the proofer. The list was generated by accessing the most recent text of each page and running it through the WordCheck engine. The WordCheck engine uses the current dictionaries/wordlists at the external, site, and project levels.</p>

<p>If you find words in this list that should not be flagged in WordCheck, add them to the project's Good Words List by copying them into the Good Words box when editing the project. (Take care not to overwrite any words that are already in the box.) You can run this tool again after saving the changes made to the Edit Project page (which include the Good Words List) and see that the words added to the Good Words List are no longer Flagged. See also the <a href="<?=$code_url;?>/faq/wordcheck-faq.php">WordCheck FAQ</a> for more information on the new WordCheck system.</p>

<?
echo_download_text( $projectid );

if ( count($messages) > 0 )
{
    echo "<p>\n";
    echo "The following warnings/errors were raised:<br>\n";
    foreach ( $messages as $message )
    {
        echo "$message<br>\n";
    }
    echo "</p>\n";
}

// how many instances (ie: frequency sections) are there?
$instances=1;
// what are the cutoff options?
$cutoffOptions = array(1,2,3,4,5,10,25,50);
// what is the intial cutoff frequecny?
$initialFreq=getInitialCutoff(5,$cutoffOptions,$bad_words_w_freq);

echo_cutoff_script($cutoffOptions,$instances);
echo_word_freq_style();
echo_cutoff_text($initialFreq,$cutoffOptions);

printTableFrequencies($initialFreq,$cutoffOptions,$bad_words_w_freq,$instances--);

// vim: sw=4 ts=4 expandtab
?>
<p>Time to generate this data: <? echo sprintf('%.2f', $t_to_generate_data); ?> seconds</p>
</body>
</html>
