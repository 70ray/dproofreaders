<?php
$relPath="./../../pinc/";
include_once($relPath.'site_vars.php');
include_once($relPath.'dp_main.inc');
include_once($relPath.'project_states.inc');
include_once($relPath.'stages.inc');
include_once($relPath.'Project.inc');
include_once($relPath.'wordcheck_engine.inc');
include_once($relPath.'Stopwatch.inc');
include_once('./post_files.inc');
include_once('./word_freq_table.inc');

$watch = new Stopwatch;
$watch->start();

set_time_limit(0); // no time limit

$projectid = $_GET["projectid"];

// if format is 'text', all words and frequencies will be printed
// if format is not 'text', an HTML page is displayed
$format = @$_GET["format"];

$t_before = $watch->read();
$messages = array();

// get the latest project text of all pages up to last possible round
$last_possible_round = get_Round_for_round_number(MAX_NUM_PAGE_EDITING_ROUNDS);
$pages_res = page_info_query($projectid,$last_possible_round->id,'LE');
$all_words_w_freq = get_distinct_words_in_text( get_page_texts( $pages_res ));

// load project languages
$languages = array_unique(array_values(get_project_languages($projectid)));

// load site word lists for project languages
$site_possible_bad_words = array();
foreach ( $languages as $language ) {
    $langcode3 = langcode3_for_langname( $language );
    $site_possible_bad_words = array_merge($site_possible_bad_words, load_site_possible_bad_words($langcode3));
}
$site_possible_bad_words = array_unique($site_possible_bad_words);

// now, remove any words that are already on the project's bad word list
$site_possible_bad_words = array_diff($site_possible_bad_words, load_project_bad_words($projectid) );

// $site_possible_bad_words doesn't have frequency info, 
// so start with the info in $all_words_w_freq,
// and extract the items where the key matches a key in $bad_words.
$bad_words_w_freq = array_intersect_key( $all_words_w_freq, array_flip($site_possible_bad_words) );

// free up finished variables
unset( $all_words_w_freq );
unset( $site_possible_bad_words );

// multisort screws up all-numeric words so we need to preprocess first
prep_numeric_keys_for_multisort( $bad_words_w_freq );

// sort the list by frequency, then by word
array_multisort( array_values( $bad_words_w_freq ), SORT_DESC, array_keys( $bad_words_w_freq ), SORT_ASC, $bad_words_w_freq );

$t_after = $watch->read();
$t_to_generate_data = $t_after - $t_before;


// if the user wants the list in text-only mode
if($format == "text") {
    $filename="${projectid}_possible_bad_words.txt";
    header("Content-type: text/plain");
    header('Content-Disposition: attachment; filename="' . $filename . '"');
    // The cache-control and pragma is a hack for IE not accepting filenames
    header('Cache-Control: must-revalidate, post-check=0, pre-check=0');
    header('Pragma: public');

    // output "word - freq" pairs
    foreach( $bad_words_w_freq as $word => $freq) {
        echo "$word - $freq\r\n";
    }
    exit;
}

?>
<html>
<head>
<title>Candidates for project's Bad Word List</title>
</head>
<body>
<h1>Candidates for project's Bad Word List</h1>
<p>The list below contains words from the site's possible bad words files that are found in this project. The list was generated by accessing the most recent text of each page and comparing it against the site bad word suggestions file for the project languages and removing words already on the project's Bad Words list.<p>

<p>By definition, words in the possible bad words file are stealth-scannos that will not be flagged by the external spell check. The existance of these words in the project does <b>not</b> mean these words are scannos, just that they might be. If you find words in the list below that should be flagged for extra attention within WordCheck, add them to the project's Bad Words List by copying them into the Bad Words box when editing the project. (Take care not to overwrite any words that are already in the box.) See also the <a href="<?=$code_url;?>/faq/wordcheck-faq.php">WordCheck FAQ</a> for more information on the new WordCheck system.</p>

<?
echo_download_text( $projectid );

if ( count($messages) > 0 )
{
    echo "<p>\n";
    echo "The following warnings/errors were raised:<br>\n";
    foreach ( $messages as $message )
    {
        echo "$message<br>\n";
    }
    echo "</p>\n";
}

// how many instances (ie: frequency sections) are there?
$instances=1;
// what are the cutoff options?
$cutoffOptions = array(1,2,3,4,5,10,25,50);
// what is the intial cutoff frequecny?
$initialFreq=getInitialCutoff(5,$cutoffOptions,$bad_words_w_freq);

echo_cutoff_script($cutoffOptions,$instances);
echo_word_freq_style();
echo_cutoff_text($initialFreq,$cutoffOptions);

printTableFrequencies($initialFreq,$cutoffOptions,$bad_words_w_freq,$instances--);

// vim: sw=4 ts=4 expandtab
?>
<p>Time to generate this data: <? echo sprintf('%.2f', $t_to_generate_data); ?> seconds</p>
</body>
</html>
