openapi: 3.0.1
info:
  title: Distributed Proofreaders API
  description: An API to access various components in the DP system.
  contact:
    name: Distributed Proofreaders
    url: https://www.pgdp.net
  license:
    name: GPL2
    url: http://opensource.org/licenses/GPL-2.0
  version: 1.0.0

servers:
- url: https://www.pgdp.net/api/v1
  description: Production
- url: https://www.pgdp.org/api/v1
  description: Test
- url: https://www.pgdp.org/api-dev/v1
  description: Development

paths:
  /projects:
    get:
      tags:
      - project
      description: Search for projects.
        <br><br>
        If different parameters are included they are ANDed together. To
        send multiple values of the same parameter to OR together, append
        the name with [] (e.g. projectid[]).
        <br><br>
        Results are paginated with a default page size of 20 and can be
        controlled with the `page` and `per_page` query parameters. See
        also the `X-Results-Total` and `Links` headers in the response.
      parameters:
      - name: projectid
        in: query
        schema:
          type: string
      - name: title
        in: query
        schema:
          type: string
        description: Title is treated as a subsearch
      - name: author
        in: query
        schema:
          type: string
        description: Author is treated as a subsearch
      - name: languages
        in: query
        schema:
          type: string
        description: Languages is treated as a subsearch
      - name: genre
        in: query
        schema:
          type: string
      - name: difficulty
        in: query
        schema:
          type: string
      - name: special_day
        in: query
        schema:
          type: string
      - name: project_manager
        in: query
        schema:
          type: string
      - name: pg_ebook_number
        in: query
        schema:
          type: integer
      - name: state
        in: query
        schema:
          type: string
      - name: field
        description: Field to return, if not set all fields are returned.
          To request multiple fields, append with [] and pass one per desired
          field (e.g. field[]=projectid&field[]=author).
        in: query
        schema:
          type: string
      - name: page
        description: Page of results to return
        in: query
        schema:
          type: integer
      - name: per_page
        description: Number of entries per page
        in: query
        schema:
          type: integer
      responses:
        200:
          description: List of projects found in search
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project'
          headers:
            X-Results-Total:
              schema:
                type: integer
              description: Total number of projects matching query
            Links:
              schema:
                type: string
              description: Links for accessing paginated response in RFC-8288 format
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'
    post:
      tags:
      - project
      description: Create a new project.
      requestBody:
        description: Project details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        200:
          description: Created project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/charsuites:
    get:
      tags:
      - project
      description: Returns a list of valid project character suites
      parameters:
      - name: enabled
        in: query
        description: Only return enabled character suites
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: List of valid character suites
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/charsuite'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/difficulties:
    get:
      tags:
      - project
      description: Returns a list of valid project difficulties
      responses:
        200:
          description: List of difficulties
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/genres:
    get:
      tags:
      - project
      description: Returns a list of valid project genres
      responses:
        200:
          description: List of genres
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/imagesources:
    get:
      tags:
      - project
      description: Returns a list of valid project image sources
      parameters:
      - name: enabled
        in: query
        description: Only return enabled image sources
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: List of valid image sources
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/image_source'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/languages:
    get:
      tags:
      - project
      description: Returns a list of valid project languages
      responses:
        200:
          description: List of languages
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/pagerounds:
    get:
      tags:
      - project
      description: Returns a list of valid page rounds
      responses:
        200:
          description: List of page rounds
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/specialdays:
    get:
      tags:
      - project
      description: Returns a list of valid special days
      parameters:
      - name: enabled
        in: query
        description: Only return enabled special days
        required: false
        schema:
          type: boolean
      responses:
        200:
          description: List of special days
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/special_day'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/states:
    get:
      tags:
      - project
      description: Returns a list of valid project states
      responses:
        200:
          description: List of states
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/holdstates:
    get:
      tags:
      - project
      description: Returns a list of holdable project states
      responses:
        200:
          description: List of holdable states
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}:
    get:
      tags:
      - project
      description: Returns details about a project
      parameters:
      - name: projectid
        in: path
        description: ID of project to return
        required: true
        schema:
          type: string
      responses:
        200:
          description: project response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
      - project
      description: Update an existing project. A partial object can be sent
        and only those fields included will be updated.
      parameters:
      - name: projectid
        in: path
        description: ID of project to update
        required: true
        schema:
          type: string
      requestBody:
        description: Project details
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/project'
      responses:
        200:
          description: Updated project
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/holdstates:
    get:
      tags:
      - project
      description: Returns a list of hold states for the project
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of current project hold states
          content:
            application/json:
              schema:
                items:
                  type: string
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
      - project
      description: Sets the holdable states for a project
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      requestBody:
        description: List of holdable states to set
        required: true
        content:
          application/json:
            schema:
              items:
                type: string
      responses:
        200:
          description: List of current project hold states
          content:
            application/json:
              schema:
                items:
                  type: string
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/wordlists/{type}:
    get:
      tags:
      - project
      description: Gets a project's word list
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Word list type
        required: true
        schema:
          type: string
          enum: [good, bad]
      responses:
        200:
          description: Requested project word list
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/wordlist'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'
    put:
      tags:
      - project
      description: Replaces a project's word list
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      - name: type
        in: path
        description: Word list type
        required: true
        schema:
          type: string
          enum: [good, bad]
      requestBody:
        description: List of replacement words
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/wordlist'
        required: true
      responses:
        200:
          description: wordlist saved
          content: {}
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages:
    get:
      tags:
      - project
      description: Gets a list of project pages
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      responses:
        200:
          description: List of a project's page names
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project_page_index'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pagedetails:
    get:
      tags:
      - project
      description: Gets all details about a project's pages
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      responses:
        200:
          description: Page details
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/project_page_detail'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/pagerounds/{pageroundid}:
    get:
      tags:
      - project
      description: Gets a project page text in a given pageround
      parameters:
      - name: projectid
        in: path
        description: ID of project
        required: true
        schema:
          type: string
      - name: pagename
        in: path
        description: Name of page
        required: true
        schema:
          type: string
      - name: pageroundid
        in: path
        description: Page round ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Project page information
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/project_page'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/checkout:
    put:
      tags:
      - project
      description: Check out some pages for proofreading
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - name: npage
        in: query
        description: number of pages to checkout
        required: false
        schema:
          type: integer
          default: 1
      responses:
        200:
          description: result status
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/checkout_status'
              example:
                status: 303
                reason: You have reached your quota of pages from 'Beginners Only' projects in this round.
                npages: 2
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/mentorcheckout:
    put:
      tags:
      - project
      description: Finds the 'oldest' mentee and checks out all his/her pages.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      responses:
        200:
          description: no content
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/returnpages:
    put:
      tags:
      - project
      description: Returns all the user's checked out pages to the round.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      responses:
        200:
          description: no content
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/nextpage:
    get:
      tags:
      - project
      description: Gets data for the next checked out page.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      responses:
        200:
          description: page data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proof_page_data'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/proofdata:
    get:
      tags:
      - project
      description: Gets project data for proofreading.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      responses:
        200:
          description: mentor mode and number of checked out pages
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proof_data'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/resumepage:
    put:
      tags:
      - project
      description: If the page is saved-as-done 'unsaves' it, gets data for the given page.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      responses:
        200:
          description: page data
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proof_page_data'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/saveasdone:
    put:
      tags:
      - project
      description: Checks the page for invalid characters and if good, saves it as done. Else returns data indicating the bad characters.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      requestBody:
        $ref: '#/components/requestBodies/TextBody'
      responses:
        200:
          description: page data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/good_page_saved'
                  - $ref: '#/components/schemas/bad_page'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/savetemp:
    put:
      tags:
      - project
      description: Checks the page for invalid characters and if good, saves it as in progress, returns page text and state. Else returns data indicating the bad characters.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      requestBody:
        $ref: '#/components/requestBodies/TextBody'
      responses:
        200:
          description: page data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/bad_page'
                  - $ref: '#/components/schemas/good_page_temp'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/saverevert:
    put:
      tags:
      - project
      description: Checks the page for invalid characters and if good, saves it as in progress, returns original page text and current state.  Else returns data indicating the bad characters.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      requestBody:
        $ref: '#/components/requestBodies/TextBody'
      responses:
        200:
          description: page data
          content:
            application/json:
              schema:
                oneOf:
                  - $ref: '#/components/schemas/good_page_temp'
                  - $ref: '#/components/schemas/bad_page'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/return:
    put:
      tags:
      - project
      description: Returns the page to the round.
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      responses:
        200:
          description: no content
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /projects/{projectid}/pages/{pagename}/text:
    get:
      tags:
      - project
      description: Gets the current (last saved) page text
      parameters:
      - $ref: '#/components/parameters/projectid'
      - $ref: '#/components/parameters/projectstate'
      - $ref: '#/components/parameters/pagename'
      - $ref: '#/components/parameters/pagestate'
      responses:
        200:
          description: page text
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/proof_page_text'
        '400':
          $ref: '#/components/responses/InvalidValue'
        '401':
          $ref: '#/components/responses/Unauthorized'
        '404':
          $ref: '#/components/responses/NotFound'
        '429':
          $ref: '#/components/responses/RateLimitExceeded'
        default:
          $ref: '#/components/responses/UnexpectedError'

  /stats/site:
    get:
      tags:
      - stats
      description: Get site statistics
      responses:
        200:
          description: Site statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/site_stats'

  /stats/site/rounds:
    get:
      tags:
      - stats
      description: Gets the site statistics for all rounds
      responses:
        200:
          description: Requested round statistics
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  $ref: '#/components/schemas/round_stats'

  /stats/site/rounds/{roundid}:
    get:
      tags:
      - stats
      description: Gets the site statistics for a round
      parameters:
      - name: roundid
        in: path
        description: Round ID
        required: true
        schema:
          type: string
      responses:
        200:
          description: Requested round statistics
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/round_stats'

components:
  securitySchemes:
    ApiKeyAuth:
      type: apiKey
      in: header
      name: X-API-KEY

  parameters:
    projectid:
      name: projectid
      in: path
      description: ID of project
      required: true
      schema:
        type: string

    projectstate:
      name: projstate
      in: query
      description: Project state
      required: true
      schema:
        type: string

    pagename:
      name: pagename
      in: path
      description: name of page
      required: true
      schema:
        type: string

    pagestate:
      name: pagestate
      in: query
      description: page state
      required: true
      schema:
        type: string

  requestBodies:
    TextBody:
      description: Text to save
      required: true
      content:
        application/json:
          schema:
            type: object
            properties:
              text:
                type: string

  schemas:
    project:
      required:
      - projectid
      - title
      - author
      - languages
      - genre
      - difficulty
      - project_manager
      - image_source
      - character_suites
      type: object
      properties:
        projectid:
          type: string
          readOnly: true
        title:
          type: string
        author:
          type: string
        languages:
          type: array
          items:
            type: string
          minItems: 1
          maxItems: 2
        genre:
          type: string
        difficulty:
          type: string
        special_day:
          type: string
        project_manager:
          type: string
        post_processor:
          type: string
          readOnly: true
        post_process_verifier:
          type: string
          readOnly: true
        image_preparer:
          type: string
        text_preparer:
          type: string
        image_source:
          type: string
        pg_ebook_number:
          type: integer
          nullable: true
        comments:
          type: string
        comment_format:
          type: string
          enum: [markdown, html]
        clearance:
          type: string
        custom_characters:
          type: string
        character_suites:
          type: array
          items:
            type: string
          minItems: 1
        state:
          type: string
          readOnly: true
        pages_available:
          type: integer
          readOnly: true
        pages_total:
          type: integer
          readOnly: true
        last_state_change_time:
          type: string
          format: dateTime
          readOnly: true
        last_page_done_time:
          type: string
          format: dateTime
          readOnly: true
        last_edit_time:
          type: string
          format: dateTime
          readOnly: true
      description: A project represents a unique project object in the system. It
        includes a great deal of information, some fields of which are calculated
        and not directly modifiable. Not all fields are available to all users. Fields
        the user does not have access to will not be returned.

    project_page_index:
      required:
      - image
      - image_url
      - image_size
      type: object
      properties:
        image:
          type: string
        image_url:
          type: string
          format: url
        image_size:
          type: integer
          description: Image size in bytes

    project_page_detail:
      required:
      - image
      - image_url
      - image_size
      - state
      type: object
      properties:
        image:
          type: string
        image_url:
          type: string
          format: url
        image_size:
          type: integer
          description: Image size in bytes
        state:
          type: string
        pagerounds:
          type: array
          items:
            $ref: '#/components/schemas/project_page_round_detail'

    project_page_round_detail:
      type: object
      required:
      - page_round
      - page_size
      properties:
        pageround:
          type: string
        page_size:
          type: integer
          description: Page size in bytes
        is_diff:
          type: boolean
          description: Is there a diff between this and the prior round
        user_page_tally:
          type: integer
          description: Number of pages proofer has proofed in this round
        wordcheck_ran:
          type: boolean
          description: Was WordCheck run on the page
        last_modified:
          type: string
          format: dateTime

    project_page:
      required:
      - pagename
      type: object
      properties:
        pagename:
          type: string
        image_url:
          type: string
        text:
          type: string
        state:
          type: string

    charsuite:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        characters:
          type: array
          items:
            type: string
        enabled:
          type: boolean

    image_source:
      required:
      - id
      type: object
      properties:
        id:
          type: string
        name:
          type: string
        name_full:
          type: string
        url:
          type: string
          format: url
        credit:
          type: string
        enabled:
          type: boolean

    site_stats:
      type: object
      properties:
        server_time:
          type: string
          format: dateTime
          readOnly: true
        registered_users:
          type: integer
          readOnly: true
        active_users_1_day:
          type: integer
          readOnly: true
        active_users_7_day:
          type: integer
          readOnly: true
        active_users_30_day:
          type: integer
          readOnly: true
      description: Statistics for the site

    special_day:
      type: object
      required:
      - id
      properties:
        id:
          type: string
        name:
          type: string
        comment:
          type: string
        url:
          type: string
          format: url
        color:
          type: string
        symbol:
          type: string
        date_open_month:
          type: integer
          description: Month the special day opens
        date_open_day:
          type: integer
          description: Day of the month the special day opens
        date_close_month:
          type: integer
          description: Month the special day closes
        date_close_day:
          type: integer
          description: Day of the month the special day closes
        enabled:
          type: boolean

    round_stats:
      type: object
      properties:
        today_goal:
          type: integer
          readOnly: true
        today_actual:
          type: integer
          readOnly: true
        yesterday_goal:
          type: integer
          readOnly: true
        yesterday_actual:
          type: integer
          readOnly: true
        month_goal:
          type: integer
          readOnly: true
        month_actual:
          type: integer
          readOnly: true
        positive_users:
          type: integer
          readOnly: true
      description: Statistics for a round

    wordlist:
      type: array
      items:
        type: string

    checkout_status:
      description: npages is the number of pages actually checked out. status is 0 if the required number of pages is checked out, Otherwise the status code for the reason why fewer pages are available. If no pages are available throws an Error with the code and reason. In either case reasons are "No more pages are available", "Beginners Quota Reached", "Beginners Project Quota Reached".
      type: object
      properties:
        status:
          type: integer
        reason:
          type: string
        npages:
          type: integer

    proof_page_text:
      type: object
      properties:
        text:
          description: the page text from current round.
          type: string

    proof_page_data:
      type: object
      properties:
        text:
          description: the page text. If page state is 'out' from OCR or previous round, else from current round
          type: string
        pagestate:
          description: the page state, for checking continuity. Either out or temp
          type: string
        saved:
          description: true if the page state is 'temp'
          type: boolean
        pagename:
          description: the filename of the page with extension
          type: string
        image_url:
          description: url of the image of the page
          type: string
        pageNum:
          description: page "number" without extension
          type: string
        roundInfoArray:
          description: array of names of proofreaders in earlier rounds
          type: array
          items:
            type: string

    proof_data:
      type: object
      properties:
        outpages:
          description: the number of pages checked out to the user.
          type: integer
        mentormode:
          description: is a beginner's project in a mentor round.
          type: boolean

    good_page_saved:
      type: object
      properties:
        good:
          type: boolean
          enum: [true]

    good_page_temp:
      type: object
      properties:
        good:
          type: boolean
          enum: [true]
        text:
          type: string
        pagestate:
          description: the page state, it is now temp
          type: string
        saved:
          description: now true
          type: boolean
          enum: [true]

    bad_page:
      type: object
      properties:
        good:
          type: boolean
          enum: [false]
        mark_array:
          type: array
          items:
            type: array
            items:
              oneOf:
                - type: string
                - type: integer

    Error:
      required:
      - message
      - code
      type: object
      properties:
        message:
          type: string
        code:
          type: integer

  responses:
    NotFound:
      description: The specified resource was not found
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    Unauthorized:
      description: Unauthorized
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    InvalidValue:
      description: Invalid Value
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    UnexpectedError:
      description: Unexpected Error
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
    RateLimitExceeded:
      description: Rate Limit Exceeded
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'

security:
  - ApiKeyAuth: []
