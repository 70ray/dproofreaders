<?php
include_once($relPath.'misc.inc');
include_once($relPath.'access_log.inc');
include_once($relPath.'SettingsClass.inc');

class NonexistentUserException extends Exception { }

class NonuniqueUserException extends Exception { }

class User
{
    private $table_row;

    // List of fields that when set for a user should never change
    private $immutable_fields = array(
        "id",
        "username",
        "u_id",
    );

    // Fields are assumed to be integers unless included here
    private $string_fields = array(
        "id",
        "real_name",
        "username",
        "email",
        "manager",
        "i_theme",
        "u_intlang",
    );


    public function __construct($username=NULL)
    {
        if($username)
        {
            $this->load("username", $username);
        }
    }

    // The __set() and __get() methods allow access to user fields without
    // creating accessors for them all individually.
    // See the PHP docs for "magic methods".
    public function __set($name, $value)
    {
        if(isset($this->$name) && in_array($name, $this->immutable_fields))
        {
            throw new DomainException(sprintf(
                _("%s is an immutable field"), $name)
            );
        }

        $this->table_row[$name] = $value;
    }

    public function __get($name)
    {
        return $this->table_row[$name];
    }

    public function __isset($name)
    {
        return isset($this->table_row[$name]);
    }

    public function load($field, $value, $strict=TRUE)
    {
        if(in_array($field, $this->string_fields))
        {
            $escaped_value = sprintf("'%s'", mysqli_real_escape_string(DPDatabase::get_connection(), $value));
        }
        else
        {
            $escaped_value = $value;
        }

        $sql = "
            SELECT *
            FROM users
            WHERE $field=$escaped_value
        ";

        $result = mysqli_query(DPDatabase::get_connection(), $sql);
        if(!$result)
        {
            throw new UnexpectedValueException(mysqli_error(DPDatabase::get_connection()));
        }
        elseif(mysqli_num_rows($result) == 0)
        {
            throw new NonexistentUserException(sprintf(
                _('No user found with %1$s = %2$s'),
                    $field, $value)
            );
        }
        elseif(mysqli_num_rows($result) > 1)
        {
            throw new NonuniqueUserException(sprintf(
                _('Multiple users found with %1$s = %2$s'),
                    $field, $value)
            );
        }
        $this->table_row = mysqli_fetch_assoc($result);

        # MySQL does case-insensitive matches for strings, as well as
        # ignores trailing whitespace. If $strict is TRUE, and the field
        # is the username, require that the requested $username matches the
        # existing username in case and whitespace by doing a PHP string
        # compare.
        if($strict and $field == 'username' and $this->username != $value)
        {
            throw new NonexistentUserException(sprintf(
                _('No user found with %1$s = %2$s'),
                    $field, $value)
            );
        }

        mysqli_free_result($result);
    }

    public function save()
    {
        throw new NotImplementedException();
    }

    public function grant_access($activity, $requester)
    {
        $this->_change_access("grant", $activity, $requester);
    }

    public function revoke_access($activity, $requester)
    {
        $this->_change_access("revoke", $activity, $requester);
    }

    public function request_access($activity)
    {
        $this->_change_access("request", $activity, 'n/a');
    }

    private function _change_access($action_type, $activity, $requester)
    {
        $userSettings =& Settings::get_Settings($this->username);
        if($action_type == "request")
            $userSettings->set_value($activity, "requested");
        else
            $userSettings->set_boolean($activity, $action_type == 'grant');
        log_access_change($this->username, $requester, $activity, $action_type);
    }

    // Static function to determine if the specified username is associated
    // with a valid user without the overhead of creating an object.
    public static function is_valid_user($username, $strict=TRUE)
    {
        $sql = sprintf("
            SELECT username
            FROM users
            WHERE username='%s'
        ", mysqli_real_escape_string(DPDatabase::get_connection(), $username));
        $result = mysqli_query(DPDatabase::get_connection(), $sql);
        if(mysqli_num_rows($result) == 0)
        {
            $is_valid = FALSE;
        }
        else
        {
            # MySQL does case-insensitive matches for strings, as well as
            # ignores trailing whitespace. If $strict is TRUE, require that
            # the requested $username matches the existing username in case
            # and whitespace by doing a PHP string compare.
            if($strict)
            {
                list($existing_username) = mysqli_fetch_row($result);
                if($username != $existing_username)
                {
                    $is_valid = FALSE;
                }
                else
                {
                    $is_valid = TRUE;
                }
            }
            else
            {
                $is_valid = TRUE;
            }
        }

        mysqli_free_result($result);
        return $is_valid;
    }

}

// XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX

$valid_username_chars_statement_for_reg_form  = _("(Valid characters are: a-z A-Z 0-9 @ - . space)");
$valid_username_chars_statement_for_elsewhere = _("(Valid characters are: a-z A-Z 0-9 @ - . _ space)");

function check_username( $username, $registering=FALSE )
// Check whether $username is a reasonable/acceptable User Name (ID).
// If it is, return an empty string.
// If not, return a string detailing the problem.
// (This is used at both registration and login.)
{
    $username_max_len = 25;
    // This is the length of the 'username' field in the 'users' table.

    if ( $username == '' )
    {
        $error = _("You did not supply a User Name (ID).");
        return $error;
    }

    if ( strlen($username) > $username_max_len )
    {
        $error = sprintf(_("Your User Name is too long.<br>(The maximum is %s characters.)"), $username_max_len);
        return $error;
    }

    // For new registrations, we disallow underscore (because it confuses the wiki software).
    // Elsewhere, we still have to allow underscore in usernames, for pre-existing users.
    if ($registering)
    {
        global $valid_username_chars_statement_for_reg_form;
        $bad_char_regex = "/[^-a-zA-Z0-9@. ]/";
        $valid_username_chars_statement = $valid_username_chars_statement_for_reg_form;
    }
    else
    {
        global $valid_username_chars_statement_for_elsewhere;
        $bad_char_regex = "/[^-a-zA-Z0-9@._ ]/";
        $valid_username_chars_statement = $valid_username_chars_statement_for_elsewhere;
    }
    if ( preg_match( $bad_char_regex, $username) )
    {
        $error = _("Your User Name contains invalid characters.")
            . "<br>"
            . $valid_username_chars_statement;
        return $error;
    }

    // In order to prevent one class of impersonations,
    // any space character in $username must have a non-space on either side.
    // Thus, no leading or trailing spaces, and no adjacent spaces.

    if ( trim($username) != $username )
    {
        $error = _("Your User Name has leading or trailing whitespace, which is not allowed.");
        return $error;
    }

    if (str_contains($username, "  "))
    {
        $error = _("Your User Name contains adjacent space characters, which is not allowed.");
        return $error;
    }

    return '';
}

// vim: sw=4 ts=4 expandtab
